# This area runs noise filtering and signal processing validation jobs.
#
# artraw->[nfsp]->artnfsp->[mag]>magnfsp
# artraw->[mag]->magorig->[nfsp]>magnfsp

import os

def configure(cfg):
    pass


def make_fcl(**subs):
    cmds = list()
    for k,v in subs.items():
        cmds.append("-e 's|@%s@|%s|g'" % (k.upper(),v))
    cmds = " ".join(cmds)
    cmds = "sed %s < ${SRC[0].abspath()} > ${TGT[0].abspath()}" % cmds
    return cmds

def art_rule(nskip=0, nevts=1, artout=0, logout=1):
    cmd = "${ART} --nevts %d --nskip %d" % (nevts, nskip)
    cmd += " --config ${SRC[0].abspath()}"
    cmd += " --source ${SRC[1].abspath()}"
    if artout is not None:
        cmd += " --output ${TGT[%d].abspath()}" % artout
    if logout is not None:
        cmd = "%s > ${TGT[%d].abspath()} 2>&1" % (cmd, logout)
    return cmd

def wct_path_find(filename):
    if filename.startswith("/"):
        return filename
    for path in os.environ["WIRECELL_PATH"].split(":"):
        fpath = os.path.join(path, filename)
        if os.path.exists(fpath):
            return fpath
    raise ValueError("no such file: %s" % filename)

def wct_cli(detector="uboone", **params):
    cmd = "${WIRE_CELL} --config ${SRC[0].abspath()}"
    params["detector"] = detector
    for kv in params.items():
        cmd += " -V %s=%s" % kv
    if "output" not in params:
        cmd += " -V output=${TGT[0].abspath()}"
    if "input" not in params:
        cmd += " -V input=${SRC[1].abspath()}"
    cmd += " > ${TGT[1].abspath()} 2>&1"
    return cmd

def magnify_diff(epsilon=0.0):
    cmd = "${WIRECELL_VALIDATE} magnify-diff --epsilon %e" % epsilon
    cmd+= " -o ${TGT[0].abspath()} ${SRC[0].abspath()} ${SRC[1].abspath()}"
    cmd+= " > ${TGT[1].abspath()} 2>&1"
    return cmd
    

def magnify_plot(name, crebin=4, trebin=5):
    '''Not all rebin numbers work!  They must be (multiples of) factors
    of the number of bins in a given dimension:

    9594: 2 3 3 13 41           wrongly assumed microboone data
    9595: 5 19 101              microboone data
    3456: 2 2 2 2 2 2 2 3 3 3   microboone W channels
    2400: 2 2 2 2 2 3 5 5       microboone U/V channels
    '''
    cmd = "${WIRECELL_VALIDATE} magnify-plot -n %s" % (name,)
    cmd+= " --crebin %d --trebin %d" %(crebin, trebin)
    if name == "orig":
        cmd += " --baseline --saturate 50"
    if name == "raw":
        cmd += " --saturate 50"
    if name in "gauss wiener".split():
        cmd += " --threshold 10"        
    cmd+= " --out ${TGT[0].abspath()} ${SRC[0].abspath()}"
    return cmd

def magnify_plot_reduce(tier):
    cmd = "${WIRECELL_VALIDATE} magnify-plot-reduce -n %s" % (tier,)
    cmd+= " --out ${TGT[0].abspath()} ${SRC[0].abspath()}"
    return cmd

def magnify_jsonify():
    return "${WIRECELL_VALIDATE} magnify-jsonify --out ${TGT[0].abspath()} ${SRC[0].abspath()}"

subruns = ['0005125-00017', '0005331-00018', '0005521-00020', '0005189-00016', '0005397-00028', '0005937-00029']

def jsonify(**dat):
    def run(tsk):
        import json
        contents = dict()
        for inp in tsk.inputs:
            contents[inp.name] = inp.read()
        dat["source_contents"] = contents
        jtext = json.dumps(dat, indent=4)
        tsk.outputs[0].write(jtext)
    return run

def htmlify():
    return "${YASHA} -V ${SRC[1].abspath()} -o ${TGT[0].abspath()} ${SRC[0].abspath()}"

def build_mag(bld, mag, install_path='${PREFIX}/html', **bag):
    '''Define build instructions for processing each magnify root file
    node.  Return dictionary of result files to expect.
    '''
    basename = mag.name.replace(".mag.root","")
    jsonnode = bld.path.find_or_declare(mag.name.replace(".root",".json"))
    mag_html_tmpl = bld.path.parent.find_resource("templates/uboone-nf-sp-mag.html.j2")
    mag_html = bld.path.find_or_declare(mag.name.replace(".root",".html"))

    dat = dict(bag)

    png_dat = dict()
    png_nodes = list()
    for tier in ["orig","raw","gauss","wiener"]:
        tiername = basename + "-" + tier
        rules = dict(
            display = magnify_plot(tier, 4, 5),
            thumb = magnify_plot(tier,16,19),
            reduc = magnify_plot_reduce(tier),
            )
        pngs = dict()
        for name, rule in rules.items():
            node = bld.path.find_or_declare(tiername+"." + name + ".png")
            bld(rule=rule, source=[mag], target=[node])
            pngs[name] = node.name
            png_nodes.append(node)

        png_dat[tier] = pngs


    dat["basename"] = basename
    dat["pngs"] = png_dat
    dat["summary_json"] = jsonnode.name
    dat["summary_html"] = mag_html.name

    bld(rule=jsonify(**dat), target=jsonnode)
    bld(rule=htmlify(), source=[mag_html_tmpl, jsonnode], target=[mag_html])
    bld.install_files(install_path, png_nodes)
    bld.install_files(install_path, [mag_html])
    
    return dat

def build(bld):
    '''
    Run validation suite for NF+SP.
    '''

    detector = "uboone"         # just MB for now, but keep this as a parameter

    # filename is generally:
    # <detector>_<ID>_<chain>.<schema>.<format>
    # detector is just "uboone" for now
    # ID identifies the event as <run>-<subrun>-many or <run>-<subrun>-<event> if single event file
    # chain is major processing steps, eg "nf-sp" for noise filter + sigproc or "daq" for raw data
    # schema is what the file follows, eg "art" or "mag"
    # format is file format, eg "root"
    filename_pattern = "{detector}_{run}-{subrun}-{event}_{chain}.{schema}.{format}"
    def fname(d, **parms):
        return filename_pattern.format(**dict(d, **parms))

    daqdir = bld.root.find_node(bld.env.DATADIR)

    # fixme: regularize names of driving files
    fcltmpl = bld.path.parent.find_resource("templates/uboone-nf-sp-mag.fcl.j2")
    indextmpl = bld.path.parent.find_resource("templates/uboone-nf-sp-index.html.j2")
    eventtmpl = bld.path.parent.find_resource("templates/uboone-nf-sp-event.html.j2")
    wctcfg = bld.root.make_node(wct_path_find("uboone/main/mag-nf-sp-mag.jsonnet"))


    diff_logs = list()

    all_dat = dict()
    all_dat["errdat"] = dict()
    for runsub in subruns:

        run,subrun = runsub.split("-")
        bag = dict(detector=detector, run=run, subrun=subrun,
                   chain="nf-sp", schema="mag", format="root")

        wcls_in = fname(bag, event="many", chain="daq", schema="art", format="root")
        print wcls_in
        wcls_in  = daqdir.find_node(wcls_in)
        assert(wcls_in)

        runsubdat = dict()
        for event in [1,2]:

            bag["event"] = event


            wcls_cfg = bld.path.find_or_declare(fname(bag, schema="cfg", format="fcl"))
            wcls_bag = dict(bag, chain="nf-sp-wcls", desc='WCT in LS')
            wcls_out = bld.path.find_or_declare(fname(wcls_bag, schema="art"))
            wcls_mag = bld.path.find_or_declare(fname(wcls_bag, schema="mag"))
            wcls_log = bld.path.find_or_declare(fname(wcls_bag, schema="wcls", format="log"))

            wct_in = wcls_mag
            wct_cfg = wctcfg
            wct_bag = dict(bag, chain="nf-sp-wct", desc='WCT from CLI')
            wct_mag = bld.path.find_or_declare(fname(wct_bag, schema="mag"))
            wct_log = bld.path.find_or_declare(fname(wct_bag, schema="wct", format="log"))

            diff_in1 = wcls_mag
            diff_in2 = wct_mag
            diff_bag = dict(bag, chain="nf-sp-wwdiff", desc='WCLS-WCT difference')
            diff_mag = bld.path.find_or_declare(fname(bag, schema="mag"))
            diff_log = bld.path.find_or_declare(fname(bag, schema="magdiff",format="log"))

            evt_json = bld.path.find_or_declare(fname(bag, schema="event", format="json"))
            evt_html = bld.path.find_or_declare(fname(bag, schema="event", format="html"))

            diff_logs.append(diff_log)
            all_dat["errdat"][diff_log.name] = dict(link=evt_html.name, desc="WCLS-WCT difference")

            # run wcls via art
            bld(rule=make_fcl(magnify_output=wcls_mag.abspath()), source=[fcltmpl], target=[wcls_cfg])
            bld(rule=art_rule(event-1), source=[wcls_cfg,wcls_in], target=[wcls_out, wcls_log, wcls_mag])

            # run wct cli
            bld(rule=wct_cli(), source=[wct_cfg, wct_in], target=[wct_mag, wct_log])

            # diff the two
            bld(rule=magnify_diff(), source=[diff_in1, diff_in2], target=[diff_mag, diff_log])

            mags = [(wcls_mag, wcls_bag),
                    (wct_mag,  wct_bag),
                    (diff_mag, diff_bag)]

            magdat=dict()
            for m,b in mags:
                magdat[m.name] = build_mag(bld, m, **b)

            evtdat = dict( bag, 
                           event_html = evt_html.name,
                           mag = magdat,
                           wcls_log = wcls_log.name,
                           wct_log = wct_log.name,
                           diff_log = diff_log.name)
            runsubdat[event] = evtdat

            bld(rule=jsonify(**evtdat), source=[diff_log], target=[evt_json])
            bld(rule=htmlify(), source=[eventtmpl, evt_json], target=[evt_html])
            bld.install_files('${PREFIX}/html', [evt_html])


        all_dat[runsub] = runsubdat
    
    index_json = bld.path.find_or_declare("all_dat.json")
    index_html = bld.path.find_or_declare("index.html")
    bld(rule=jsonify(dat = all_dat),  source=diff_logs, target=index_json)
    bld(rule=htmlify(), source=[indextmpl, index_json], target=[index_html])
    bld.install_files('${PREFIX}/html', [index_html])
